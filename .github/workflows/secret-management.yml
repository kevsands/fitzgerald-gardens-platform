name: Secret Management

on:
  workflow_dispatch: # Manual triggering

permissions:
  contents: read
  id-token: write # Needed for OIDC authentication

jobs:
  rotate-secrets:
    name: Rotate Application Secrets
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # AWS credentials with OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Get secrets from AWS Secrets Manager
      - name: Get secrets from AWS Secrets Manager
        id: secrets
        run: |
          SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id ${{ secrets.AWS_SECRET_NAME }} --query SecretString --output text)
          echo "::add-mask::$SECRET_VALUE"
          echo "secret_value=$SECRET_VALUE" >> $GITHUB_OUTPUT

      # Update GitHub repository secrets
      - name: Update GitHub repository secrets
        uses: gliech/create-github-secret-action@v1
        with:
          name: APP_SECRET
          value: ${{ steps.secrets.outputs.secret_value }}
          pa_token: ${{ secrets.PA_TOKEN }}

      # Alternatively, set environment variables in the GitHub repository
      - name: Update GitHub environment variables
        uses: fjogeleit/http-request-action@v1
        with:
          url: 'https://api.github.com/repos/${{ github.repository }}/environments/${{ github.ref_name }}/variables/APP_ENV'
          method: 'PATCH'
          contentType: 'application/json'
          data: '{"value": "production"}'
          bearerToken: ${{ secrets.GITHUB_TOKEN }}

  verify-secrets:
    name: Verify Secrets Usage
    runs-on: ubuntu-latest
    needs: rotate-secrets
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      # Run secret detection tool (example: Gitleaks)
      - name: Run secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        continue-on-error: true
      
      # Ensure no secrets in code
      - name: Check for hardcoded secrets
        run: |
          # Search for common patterns of hardcoded secrets
          FOUND_SECRETS=$(grep -r -E "(password|secret|key|token|credential).*=.*['\"].*['\"]" \
            --include="*.js" --include="*.ts" --include="*.tsx" --include="*.jsx" \
            --exclude-dir="node_modules" --exclude-dir=".git" .)
          
          if [ ! -z "$FOUND_SECRETS" ]; then
            echo "Potential hardcoded secrets found:"
            echo "$FOUND_SECRETS"
            exit 1
          else
            echo "No hardcoded secrets found."
          fi